import tensorflow as tf
import tensorflow.contrib.slim as slim
import numpy as np
import gym
import random
from PoleChromosome import PoleChromosome
from gen.ThreadAgent import ThreadAgent
from multiprocessing.pool import ThreadPool

import matplotlib
matplotlib.use('TkAgg')
import matplotlib.pyplot as plt

def GA_missing_example():
    new_data_with_half_improvement = [0.4666666666666667, 0.3333333333333333, 0.43333333333333335, 0.4, 0.5, 0.4, 0.3,
                                      0.43333333333333335, 0.3333333333333333, 0.3, 0.4, 0.2, 0.3333333333333333,
                                      0.3333333333333333, 0.1, 0.2, 0.3333333333333333, 0.3333333333333333,
                                      0.3333333333333333, 0.16666666666666666, 0.26666666666666666, 0.3333333333333333,
                                      0.4, 0.23333333333333334, 0.26666666666666666, 0.43333333333333335,
                                      0.26666666666666666, 0.2, 0.4666666666666667, 0.16666666666666666,
                                      0.26666666666666666, 0.2, 0.4666666666666667, 0.36666666666666664,
                                      0.23333333333333334, 0.43333333333333335, 0.26666666666666666,
                                      0.36666666666666664, 0.4, 0.3333333333333333, 0.26666666666666666]

    fig, ax = plt.subplots()
    ax.plot(new_data_with_half_improvement[1:32], 'k', label='[0.5, 0.5] probabilities')
    ax.set_xlabel('Generation')
    ax.set_ylabel('Improvement Rate')
    plt.show()


def NN_with_L1_loss(ax, format, label, graphType):
    transformation_prob = [0.73749256,  0.26250735, 0.78343362,  0.21656635, 0.76176947,  0.2382306 , 0.77150112,  0.22849874, 0.78487074,  0.21512915, 0.82485312,  0.17514695, 0.84269935,  0.1573007 , 0.83218193,  0.16781816, 0.81459057,  0.18540946, 0.79515529,  0.20484476, 0.7804631 ,  0.21953699, 0.75692749,  0.24307254, 0.73140508,  0.2685948 , 0.71117836,  0.28882167, 0.67385358,  0.32614642, 0.59218287,  0.40781727, 0.61673838,  0.38326165, 0.60201812,  0.39798194, 0.52914488,  0.47085518, 0.50695199,  0.49304798, 0.51160651,  0.48839343, 0.5057376,  0.4942624, 0.47880259,  0.52119744, 0.47723019,  0.52276981, 0.47740164,  0.52259839, 0.46369714,  0.53630286, 0.43447545,  0.5655244 , 0.43928137,  0.5607186 , 0.43132421,  0.56867576, 0.4022612 ,  0.59773868, 0.39407456,  0.60592544, 0.38338035,  0.61661971, 0.36408153,  0.6359185 , 0.36046416,  0.63953584, 0.35148159,  0.64851838, 0.3405368 ,  0.65946311, 0.30820161,  0.69179833, 0.3177413 ,  0.68225867, 0.32243702,  0.67756301, 0.32835442,  0.67164558, 0.28620905,  0.71379089, 0.27962276,  0.72037721, 0.26697406,  0.73302609, 0.26838508,  0.73161501, 0.2904695 ,  0.70953047, 0.30254948,  0.69745058, 0.33661801,  0.66338193, 0.35729522,  0.64270473, 0.36279306,  0.63720697, 0.36346051,  0.63653946, 0.33884233,  0.66115773, 0.32297984,  0.67702019, 0.30473369,  0.69526631]
    res = [45.362499999999997, 56.8125, 69.305000000000007, 75.177500000000009, 84.91749999999999, 95.585000000000008, 115.14749999999999, 125.53999999999999, 125.69500000000001, 138.34499999999997, 143.82499999999999, 147.40499999999997, 145.74250000000001, 148.61000000000001, 155.66249999999999, 158.29749999999999, 164.18000000000001, 172.70499999999998, 171.83000000000001, 167.94750000000002, 171.32249999999999, 173.07749999999999, 170.73250000000002, 177.45750000000004, 174.78250000000003, 175.24250000000001, 176.7825, 182.39000000000001, 181.66999999999999, 183.19499999999999, 185.82249999999999, 185.03249999999997, 182.38500000000002, 184.73000000000002, 181.55250000000001, 184.9075, 188.42999999999998, 184.03, 184.32999999999998, 185.48000000000002, 186.55250000000001, 186.03249999999997, 187.73750000000001, 191.095, 191.05500000000001, 195.315, 195.10249999999999, 198.4025, 197.47000000000003, 198.42750000000001, 198.97750000000002, 199.38749999999999, 198.995]
    print len(res)
    improvement = [0.5, 0.40000000000000002, 0.29999999999999999, 0.33333333333333331, 0.40000000000000002, 0.13333333333333333, 0.53333333333333333, 0.23333333333333334, 0.36666666666666664, 0.33333333333333331, 0.29999999999999999, 0.33333333333333331, 0.33333333333333331, 0.20000000000000001, 0.16666666666666666, 0.29999999999999999, 0.23333333333333334, 0.23333333333333334, 0.33333333333333331, 0.29999999999999999, 0.26666666666666666, 0.33333333333333331, 0.26666666666666666, 0.23333333333333334, 0.16666666666666666, 0.29999999999999999, 0.33333333333333331, 0.43333333333333335, 0.36666666666666664, 0.20000000000000001, 0.36666666666666664, 0.36666666666666664, 0.59999999999999998, 0.26666666666666666, 0.40000000000000002, 0.43333333333333335, 0.26666666666666666, 0.29999999999999999, 0.23333333333333334, 0.23333333333333334, 0.36666666666666664, 0.46666666666666667, 0.46666666666666667, 0.40000000000000002, 0.33333333333333331, 0.46666666666666667, 0.36666666666666664, 0.33333333333333331, 0.23333333333333334, 0.33333333333333331, 0.36666666666666664, 0.23333333333333334, 0.16666666666666666]
    print np.array(improvement).mean(0)
    if graphType == 0:
        trp = np.array(transformation_prob)
        trpt = np.transpose(np.reshape(trp, [len(trp)/2, 2]))
        ax.plot(trpt[0,0:51], ':', label=label+'-mutation-prob')
        ax.plot(trpt[1,0:51], 'o', label=label+'-crossover-prob')
    elif graphType == 1:
        ax.plot(res[0:51], format, label=label)
    else:
        ax.plot(improvement, format, label=label)

def NN_with_MSE_loss(ax, format, label, graphType):
    transformation_prob = [ 0.20719905,  0.79280102,  0.22497463,  0.77502543,  0.23871225,
        0.76128781,  0.34937337,  0.65062672,  0.26361236,  0.73638761,
        0.2760537 ,  0.72394639,  0.30458269,  0.69541734,  0.31312332,
        0.68687683,  0.3583658 ,  0.64163423,  0.38946316,  0.61053681,
        0.44622877,  0.5537712 ,  0.43838787,  0.56161219,  0.43024334,
        0.56975669,  0.38149196,  0.61850804,  0.33451259,  0.66548741,
        0.38715926,  0.61284077,  0.39108771,  0.60891229,  0.39068806,
        0.60931194,  0.43796843,  0.56203157,  0.42054424,  0.57945573,
        0.39508894,  0.60491103,  0.3798396 ,  0.62016028,  0.35878143,
        0.64121854,  0.38806733,  0.61193264,  0.37972715,  0.62027282,
        0.4193702 ,  0.58062989,  0.38613564,  0.61386436,  0.36640385,
        0.63359624,  0.34613335,  0.65386659,  0.39029393,  0.60970616,
        0.39795038,  0.60204953,  0.39202896,  0.60797095,  0.37538135,
        0.62461865,  0.34323841,  0.65676147,  0.35679907,  0.64320099,
        0.3419278 ,  0.65807223,  0.33633533,  0.66366458,  0.32050201,
        0.67949784,  0.32813862,  0.67186159,  0.34624276,  0.65375715,
        0.33303738,  0.66696256,  0.32816812,  0.67183191,  0.33190268,
        0.66809738,  0.32332897,  0.67667097,  0.32731664,  0.67268342,
        0.35373834,  0.64626163,  0.33267027,  0.66732967,  0.36227274,
        0.6377272 ,  0.35966176,  0.64033824,  0.38851279,  0.61148709,
        0.36831489,  0.63168508,  0.33756986,  0.66243005,  0.3797498 ,
        0.62025005,  0.38244808,  0.61755198,  0.38239187,  0.61760801,
        0.37774736,  0.6222527 ,  0.36050084,  0.63949901,  0.3344759 ,
        0.66552413,  0.34183297,  0.65816694,  0.34518489,  0.65481526,
        0.38443539,  0.61556458,  0.35668486,  0.6433152 ,  0.33604506,
        0.66395497,  0.32095954,  0.67904049,  0.31590393,  0.6840961 ,
        0.31874818,  0.68125176,  0.32894102,  0.67105895,  0.32027248,
        0.67972744,  0.32228404,  0.67771602,  0.31963825,  0.68036187,
        0.34705731,  0.65294266,  0.3465699 ,  0.6534301 ]
    res = [30, 61.029999999999987, 73.672499999999999, 97.254999999999995, 107.4675, 116.88250000000001, 133.47999999999999, 149.15000000000001, 149.4975, 153.63500000000002, 157.8725, 159.80500000000001, 162.1825, 167.40000000000001, 169.22499999999999, 167.28, 170.20250000000001, 169.97499999999999, 169.08000000000001, 165.95750000000001, 167.39249999999998, 169.45750000000001, 168.02249999999998, 172.35750000000002, 171.17499999999998, 174.08499999999998, 175.92749999999998, 173.51500000000001, 177.5675, 179.75500000000002, 178.41000000000003, 179.65500000000003, 180.72499999999999, 179.845, 180.30500000000001, 182.30500000000001, 182.73750000000001, 182.31250000000003, 184.255, 186.64250000000001, 185.64999999999998, 183.89499999999998, 186.32250000000002, 184.52500000000001, 185.005, 186.75749999999999, 182.42249999999999, 186.9675, 186.39749999999998, 184.2175, 181.54249999999999, 184.82999999999998, 185.48250000000002, 186.58750000000003, 186.99499999999998, 186.16750000000002, 180.43000000000001, 184.99250000000001, 185.50749999999999, 186.3725, 183.7175, 186.57249999999999, 186.27999999999997, 187.55500000000001, 188.4725, 187.76499999999999, 187.61499999999998, 186.91999999999999, 187.13999999999999, 187.99999999999997, 186.9675, 189.60750000000002, 189.72999999999999]
    print len(res)
    improvement = [0.56666666666666665, 0.33333333333333331, 0.53333333333333333, 0.13333333333333333, 0.36666666666666664, 0.23333333333333334, 0.40000000000000002, 0.33333333333333331, 0.33333333333333331, 0.46666666666666667, 0.20000000000000001, 0.29999999999999999, 0.26666666666666666, 0.33333333333333331, 0.56666666666666665, 0.46666666666666667, 0.40000000000000002, 0.33333333333333331, 0.23333333333333334, 0.29999999999999999, 0.36666666666666664, 0.29999999999999999, 0.36666666666666664, 0.33333333333333331, 0.36666666666666664, 0.40000000000000002, 0.16666666666666666, 0.43333333333333335, 0.20000000000000001, 0.43333333333333335, 0.46666666666666667, 0.36666666666666664, 0.40000000000000002, 0.40000000000000002, 0.29999999999999999, 0.40000000000000002, 0.53333333333333333, 0.29999999999999999, 0.56666666666666665, 0.33333333333333331, 0.23333333333333334, 0.46666666666666667, 0.33333333333333331, 0.5, 0.46666666666666667, 0.29999999999999999, 0.36666666666666664, 0.40000000000000002, 0.53333333333333333, 0.10000000000000001, 0.46666666666666667, 0.23333333333333334, 0.40000000000000002, 0.43333333333333335, 0.40000000000000002, 0.40000000000000002, 0.33333333333333331, 0.33333333333333331, 0.16666666666666666, 0.26666666666666666, 0.33333333333333331, 0.33333333333333331, 0.36666666666666664, 0.26666666666666666, 0.46666666666666667, 0.36666666666666664, 0.36666666666666664, 0.36666666666666664, 0.53333333333333333, 0.40000000000000002, 0.43333333333333335, 0.16666666666666666]
    print np.array(improvement).mean(0)
    if graphType == 0:
        trp = np.array(transformation_prob)
        trpt = np.transpose(np.reshape(trp, [len(trp)/2, 2]))
        ax.plot(trpt[0,0:51], '--', label=label+'-mutation-prob')
        ax.plot(trpt[1,0:51], '-.', label=label+'-crossover-prob')
    elif graphType == 1:
        ax.plot(res[0:51], format, label=label)
    else:
        ax.plot(improvement, format, label=label)

def NN_with_ln_loss(ax, format, label, graphType):
    transformation_prob = [ 0.37527093,  0.62472904,  0.30408236,  0.69591767,  0.32293192,
        0.67706805,  0.30399767,  0.69600236,  0.40110236,  0.5988977 ,
        0.3397187 ,  0.6602813 ,  0.3958129 ,  0.60418713,  0.38756612,
        0.61243385,  0.43736967,  0.5626303 ,  0.34733614,  0.65266401,
        0.3649964 ,  0.63500363,  0.32622325,  0.67377675,  0.37304637,
        0.62695366,  0.40185153,  0.59814847,  0.40662134,  0.59337872,
        0.4066281 ,  0.59337193,  0.40233061,  0.5976693 ,  0.34035638,
        0.65964359,  0.3069219 ,  0.6930781 ,  0.27122205,  0.72877795,
        0.23214157,  0.76785833,  0.19914779,  0.80085224,  0.2168179 ,
        0.78318214,  0.20001331,  0.79998666,  0.21620949,  0.78379065,
        0.23386997,  0.76613003,  0.24385436,  0.75614566,  0.23392792,
        0.76607198,  0.20596287,  0.79403704,  0.24596153,  0.75403851,
        0.21740347,  0.78259653,  0.2171765 ,  0.78282338,  0.22505344,
        0.77494645,  0.22324821,  0.77675176,  0.20470086,  0.79529929,
        0.21847746,  0.78152251,  0.21879274,  0.7812072 ,  0.20624764,
        0.79375231,  0.21465212,  0.78534794,  0.22783789,  0.77216214,
        0.24345642,  0.75654352,  0.23273925,  0.76726073,  0.22039978,
        0.77960014,  0.21567659,  0.78432333,  0.22688107,  0.77311891,
        0.22771534,  0.77228469,  0.21811579,  0.78188419,  0.21372519,
        0.78627479,  0.20633049,  0.79366958,  0.21832606,  0.78167403,
        0.21611042,  0.78388953,  0.21322912,  0.78677076,  0.20442745,
        0.79557264,  0.20825273,  0.79174721,  0.20670706,  0.793293  ,
        0.20554124,  0.79445875,  0.21363486,  0.78636515,  0.20699449,
        0.79300565,  0.19611068,  0.80388927]
    res = [30, 56.237499999999997, 66.807500000000005, 87.237499999999997, 90.892500000000013, 97.004999999999995, 104.5325, 105.50250000000001, 109.47499999999999, 115.72999999999999, 125.41749999999999, 126.32750000000001, 133.91499999999999, 129.50749999999999, 131.23499999999999, 132.97499999999999, 133.435, 134.41999999999999, 134.78000000000003, 135.28, 138.75500000000002, 141.82499999999999, 144.7475, 147.92750000000001, 148.67249999999999, 147.315, 145.67750000000001, 145.97, 149.2825, 148.33499999999998, 147.8425, 148.35999999999999, 147.8175, 151.06249999999997, 147.80500000000001, 151.20500000000001, 150.5325, 150.08499999999998, 150.14749999999998, 151.96000000000001, 151.33000000000001, 150.50749999999999, 153.1225, 151.82250000000002, 153.95249999999999, 153.3725, 151.05749999999998, 149.04999999999998, 153.04749999999999, 152.10499999999999, 153.38500000000002, 153.30250000000001, 152.16500000000002, 153.75, 151.72999999999999, 152.31, 153.82749999999999, 153.5275, 153.29000000000002, 153.20999999999998]
    print len(res)
    improvement = [0.29999999999999999, 0.33333333333333331, 0.33333333333333331, 0.33333333333333331, 0.40000000000000002, 0.36666666666666664, 0.26666666666666666, 0.56666666666666665, 0.36666666666666664, 0.53333333333333333, 0.6333333333333333, 0.53333333333333333, 0.29999999999999999, 0.33333333333333331, 0.29999999999999999, 0.40000000000000002, 0.5, 0.43333333333333335, 0.5, 0.46666666666666667, 0.46666666666666667, 0.33333333333333331, 0.33333333333333331, 0.26666666666666666, 0.53333333333333333, 0.5, 0.33333333333333331, 0.5, 0.46666666666666667, 0.36666666666666664, 0.26666666666666666, 0.20000000000000001, 0.40000000000000002, 0.53333333333333333, 0.46666666666666667, 0.26666666666666666, 0.59999999999999998, 0.46666666666666667, 0.46666666666666667, 0.33333333333333331, 0.40000000000000002, 0.29999999999999999, 0.56666666666666665, 0.36666666666666664, 0.43333333333333335, 0.29999999999999999, 0.6333333333333333, 0.36666666666666664, 0.59999999999999998, 0.56666666666666665, 0.23333333333333334, 0.40000000000000002, 0.43333333333333335, 0.36666666666666664, 0.46666666666666667, 0.26666666666666666, 0.26666666666666666, 0.40000000000000002, 0.43333333333333335]
    print np.array(improvement).mean(0)
    if graphType == 0:
        trp = np.array(transformation_prob)
        trpt = np.transpose(np.reshape(trp, [len(trp)/2, 2]))
        ax.plot(trpt[0,0:51], '^', label=label+'-mutation-prob')
        ax.plot(trpt[1,0:51], 's', label=label+'-crossover-prob')
    elif graphType == 1:
        ax.plot(res[0:51], format, label=label)
    else:
        ax.plot(improvement, format, label=label)

def GA_50_50_prob():
    res = [30, 45.8825, 63.077500000000008, 71.747499999999988, 76.817499999999995, 84.340000000000003, 88.200000000000003, 88.959999999999994, 96.287499999999994, 106.16749999999999, 105.10500000000002, 116.69000000000001, 126.0125, 131.87499999999997, 133.85249999999999, 135.06, 140.23499999999999, 144.65249999999997, 140.08499999999998, 140.14000000000001, 135.77500000000003, 144.22, 145.2175, 147.23750000000001, 145.49250000000001, 149.75999999999999, 150.08250000000001, 148.33750000000001, 146.3725, 149.29500000000002, 151.10250000000002, 154.41250000000002, 155.77250000000001, 158.6525, 160.65749999999997, 159.41749999999999, 159.91500000000002, 156.44999999999999, 164.6925, 167.05500000000001, 172.41749999999999, 173.63249999999999, 177.81, 181.46499999999997, 182.14249999999998, 185.92000000000002, 183.48999999999998, 188.625, 186.81999999999999, 190.39499999999998, 189.22499999999997, 193.65499999999997, 190.32749999999996, 191.31999999999999, 191.66499999999996, 194.39000000000001, 195.61499999999998, 193.47750000000002, 192.72750000000002, 194.21999999999997, 193.67249999999999, 195.9375, 195.97999999999999, 194.88, 192.41000000000003, 195.08499999999998, 195.66749999999999, 194.73750000000001, 196.66499999999999, 196.18749999999997, 196.72499999999999, 196.26249999999999, 197.60750000000002, 195.16750000000002, 197.46250000000001, 195.16749999999999, 197.29499999999999, 195.17749999999998, 195.785, 195.035, 197.04749999999999, 195.08249999999998, 196.18750000000003, 196.83000000000001, 197.04000000000002]
    print len(res)
    improvement = [0.43333333333333335, 0.43333333333333335, 0.3333333333333333, 0.36666666666666664, 0.36666666666666664, 0.26666666666666666, 0.3333333333333333, 0.4, 0.3333333333333333, 0.3, 0.4, 0.4666666666666667, 0.3, 0.3333333333333333, 0.36666666666666664, 0.2, 0.4, 0.5, 0.16666666666666666, 0.13333333333333333, 0.6333333333333333, 0.3333333333333333, 0.23333333333333334, 0.2, 0.5, 0.3333333333333333, 0.4666666666666667, 0.26666666666666666, 0.3333333333333333, 0.3, 0.43333333333333335, 0.23333333333333334, 0.2, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.43333333333333335, 0.23333333333333334, 0.4, 0.36666666666666664, 0.36666666666666664, 0.36666666666666664, 0.26666666666666666, 0.43333333333333335, 0.26666666666666666, 0.2, 0.4, 0.23333333333333334, 0.5666666666666667, 0.43333333333333335, 0.3, 0.26666666666666666, 0.43333333333333335, 0.2, 0.13333333333333333, 0.43333333333333335, 0.3, 0.3, 0.2, 0.3333333333333333, 0.23333333333333334, 0.36666666666666664, 0.36666666666666664, 0.16666666666666666, 0.1, 0.3, 0.23333333333333334, 0.16666666666666666, 0.3333333333333333, 0.16666666666666666, 0.3333333333333333, 0.36666666666666664, 0.16666666666666666, 0.3, 0.3333333333333333, 0.4, 0.3333333333333333, 0.3, 0.16666666666666666, 0.3333333333333333, 0.23333333333333334, 0.3, 0.3333333333333333, 0.3]

def compare_loss_functions():
    fig, ax = plt.subplots()
    NN_with_MSE_loss(ax, 'k', 'MSE', 1)
    NN_with_L1_loss(ax, 'k--', 'L1', 1)
    NN_with_ln_loss(ax, 'k:', 'ln', 1)
    # ax.plot(new_data_with_half_pure_ga_tranc, 'k', label='[0.5, 0.5] probabilities')
    # ax.plot(genetic_only_mutation, 'k--', label='only mutation')
    # ax.plot(genetic_only_crossover, 'k:', label='only crossover')
    # ax.set_title('Genetic algorithm with [0.5,0.5] probabilities')
    ax.set_xlabel('Generation')
    ax.set_ylabel('probability')
    legend = ax.legend(loc='upper left', shadow=True)  # , fontsize='x-large')
    plt.show()

compare_loss_functions()